# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Deploy to Azure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: '.Net Restore, Build and Test'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  infrastructure:
        name: 'Build Infrastructure'
        runs-on: ubuntu-latest        
       
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
          run:
            shell: bash
            working-directory: ./infra/azure    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3
    
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: terraform init
    
        # Generates an execution plan for Terraform
        - name: Terraform Plan
          run: terraform plan -input=false
    
          
    
          # On push to "main", build or change infrastructure according to Terraform configuration files
          # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' 
          run: terraform apply -auto-approve -input=false
  publish:
            name: 'Publish Docker Image to Registry'
            runs-on: ubuntu-latest
            needs: [infrastructure, build]
            steps:
              - uses: actions/checkout@v3
              - name: Setup .NET
                uses: actions/setup-dotnet@v3
                with:
                  dotnet-version: 8.0.x
              - name: Login to Docker
                run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login ${{secrets.DOCKER_REGISTRY}} -u ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}              
  app_infrastructure:
            name: 'Build App Infrastructure'
            runs-on: ubuntu-latest
            needs: [infrastructure, publish]
            environment: production
        
            # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
            defaults:
              run:
                shell: bash
                working-directory: ./infra/app
        
            steps:
            # Checkout the repository to the GitHub Actions runner
            - name: Checkout
              uses: actions/checkout@v3
        
            # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
            # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
            - name: Terraform Init
              run: terraform init
        
            # Generates an execution plan for Terraform
            - name: Terraform Plan
              run: terraform plan -input=false
        
              
        
              # On push to "main", build or change infrastructure according to Terraform configuration files
              # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
            - name: Terraform Apply
              if: github.ref == 'refs/heads/"main"' 
              run: terraform apply -auto-approve -input=false

 
 
    
